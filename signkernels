#!/usr/bin/make -f
# ------- settings --------

# make settings
SHELL := /bin/bash
SELF  := ./signkernels --no-print-directory

# required stub files
OSREL   = /etc/os-release
EFISTUB = /usr/lib/systemd/boot/efi/linuxx64.efi.stub

# signing keys
PKI  := ../pki
KEY  =  $(PKI)/DatabaseKey.key
CERT =  $(PKI)/DatabaseKey.crt

# directories
BOOT := /boot
ESP  := /tmp

# what's needed for a single kernel
KERNEL    = /boot/vmlinuz-$(if $*,$*,%)
MICROCODE	= /boot/intel-ucode.img
INITRAMFS = $(MICROCODE) /boot/initramfs-$(if $*,$*,%).img
OUTPUT    = $(ESP)/vmlinuz-$*.efi
CMDLINE   = quiet

# search for kernels / hook targets
FOUNDKERNELS := $(addprefix kernel-,$(shell ls $(BOOT)/vmlinuz-* | sed 's/.*\/vmlinuz-//'))
HOOKTARGETS  := boot/vmlinuz-(.*)

# -------- targets --------
.PHONY: kernels kernel-% hook
.DEFAULT_GOAL := kernels

# include any custom settings / targets
-include /etc/sbkernelsign.mk
-include settings.mk

# this is the "make all" that will build custom and found kernels
kernels: $(CUSTOMKERNELS) $(FOUNDKERNELS)

# default configuration for a single kernel
kernel-% :
	@$(SELF) $(OUTPUT) \
		EFISTUB="$(EFISTUB)" \
		OSREL="$(OSREL)" \
		KEY="$(KEY)" \
		CERT="$(CERT)" \
		KERNEL="$(KERNEL)" \
		INITRAMFS="$(INITRAMFS)" \
		CMDLINE="$(CMDLINE)"

# hook mode for pacman, reads targets from stdin
hook:
	while read target; do \
	  if [[ $$target =~ $(HOOKTARGETS) ]]; then \
	    make kernel_$${BASH_REMATCH[1]}; \
	  else FORCEALL=yes; fi \
	done; \
	if [[ $$FORCEALL == yes ]]; then \
	  ./ kernels; \
	fi

$(ESP)/vmlinuz-%.efi : $(EFISTUB) $(OSREL) $(KEY) $(CERT) $(KERNEL) $(INITRAMFS)
	objcopy "$(EFISTUB)" "$@.new" \
		--change-section-vma   .osrel=0x0020000  --add-section   .osrel="$(OSREL)" \
		--change-section-vma .cmdline=0x0030000  --add-section .cmdline=<(printf '%s' '$(CMDLINE)') \
		--change-section-vma   .linux=0x2000000  --add-section   .linux="$(KERNEL)" \
		--change-section-vma  .initrd=0x3000000  --add-section  .initrd=<(cat $(INITRAMFS))
	sbsign --key "$(KEY)" --cert "$(CERT)" \
		--output "$@.new" "$@.new"
	mv -b "$@.new" "$@"

